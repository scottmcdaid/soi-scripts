"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import message_t

import analog_t

import digital_t

class pcomms_t(object):
    __slots__ = ["time_unix_sec", "count_publish", "sender_id", "num_analogs", "analogs", "num_digitals", "digitals", "num_messages", "messages"]

    def __init__(self):
        self.time_unix_sec = 0.0
        self.count_publish = 0
        self.sender_id = ""
        self.num_analogs = 0
        self.analogs = []
        self.num_digitals = 0
        self.digitals = []
        self.num_messages = 0
        self.messages = []

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(pcomms_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dq", self.time_unix_sec, self.count_publish))
        __sender_id_encoded = self.sender_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__sender_id_encoded)+1))
        buf.write(__sender_id_encoded)
        buf.write("\0")
        buf.write(struct.pack(">i", self.num_analogs))
        for i0 in range(self.num_analogs):
            assert self.analogs[i0]._get_packed_fingerprint() == analog_t.analog_t._get_packed_fingerprint()
            self.analogs[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.num_digitals))
        for i0 in range(self.num_digitals):
            assert self.digitals[i0]._get_packed_fingerprint() == digital_t.digital_t._get_packed_fingerprint()
            self.digitals[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.num_messages))
        for i0 in range(self.num_messages):
            assert self.messages[i0]._get_packed_fingerprint() == message_t.message_t._get_packed_fingerprint()
            self.messages[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != pcomms_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pcomms_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pcomms_t()
        self.time_unix_sec, self.count_publish = struct.unpack(">dq", buf.read(16))
        __sender_id_len = struct.unpack('>I', buf.read(4))[0]
        self.sender_id = buf.read(__sender_id_len)[:-1].decode('utf-8', 'replace')
        self.num_analogs = struct.unpack(">i", buf.read(4))[0]
        self.analogs = []
        for i0 in range(self.num_analogs):
            self.analogs.append(analog_t.analog_t._decode_one(buf))
        self.num_digitals = struct.unpack(">i", buf.read(4))[0]
        self.digitals = []
        for i0 in range(self.num_digitals):
            self.digitals.append(digital_t.digital_t._decode_one(buf))
        self.num_messages = struct.unpack(">i", buf.read(4))[0]
        self.messages = []
        for i0 in range(self.num_messages):
            self.messages.append(message_t.message_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pcomms_t in parents: return 0
        newparents = parents + [pcomms_t]
        tmphash = (0xfe5c7c7a9da33c1d+ analog_t.analog_t._get_hash_recursive(newparents)+ digital_t.digital_t._get_hash_recursive(newparents)+ message_t.message_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pcomms_t._packed_fingerprint is None:
            pcomms_t._packed_fingerprint = struct.pack(">Q", pcomms_t._get_hash_recursive([]))
        return pcomms_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

